# ------------------------------------------------------------------
# stages
# ------------------------------------------------------------------

stages:
  - "Compile"     # build jar and provide as artifact
  - "Package"   # dockerize jar and push to docker registry
  - "Deploy"  # deploy image to openshift

# ------------------------------------------------------------------
# variables
# ------------------------------------------------------------------

variables: &variables

  ###########################
  # Docker images variables #
  ###########################

  GITLAB_REGISTRY: "gitlab-registry.adorsys.de"
  GITLAB_NAMESPACE: "addgreen-fileupload"
  DOCKER_TAG: "0.0.1"

  OPENSHIFT_NAMESPACE_ADDGREEN_FILEUPLOAD: "addgreen-fileupload"
  OPENSHIFT_NAMESPACE_SUPPORT8X: ""

    ###########################
    # Build variables         #
    ###########################

    JAVA_TOOL_OPTIONS: "-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -XX:MaxRAM=3G -XX:MaxRAMFraction=3"
    MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository"

# ------------------------------------------------------------------
# reusable yaml anchors
# ------------------------------------------------------------------

# Build docker images and put them to GITLAB repo
.build_docker_image: &build_docker_image
  script:
    - docker build -t "${GITLAB_REGISTRY}/${GITLAB_NAMESPACE}/$OPENSHIFT_NAMESPACE_ADDGREEN_FILEUPLOAD:$DOCKER_TAG" .

    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $GITLAB_REGISTRY
    - docker push "${GITLAB_REGISTRY}/${GITLAB_NAMESPACE}/$OPENSHIFT_NAMESPACE_ADDGREEN_FILEUPLOAD:$DOCKER_TAG"
    - docker logout

# Copy Dockerhub images to Openshift (depending on ${DOCKER_TAG} and ${OPENSHIFT_NAMESPACE})
.deploy_openshift: &deploy_openshift
  script:
    - >-
      skopeo copy
      --src-creds=gitlab-ci-token:$CI_BUILD_TOKEN
      --dest-creds=openshift:${openshift-token}
      "docker://${GITLAB_REGISTRY}/${GITLAB_NAMESPACE}/$OPENSHIFT_NAMESPACE_ADDGREEN_FILEUPLOAD:$DOCKER_TAG"
      "docker://${OPENSHIFT_REGISTRY}/${OPENSHIFT_NAMESPACE}/${OPENSHIFT_NAMESPACE_ADDGREEN_FILEUPLOAD}:latest"

# ------------------------------------------------------------------
# jobs
# ------------------------------------------------------------------

build_package:
  stage: "Compile"
  image: "adorsys/ci-build:latest"
  script:
    - cat /sys/fs/cgroup/memory/memory.limit_in_bytes
    - java -XX:+PrintFlagsFinal -version | grep -Ei "maxheapsize|maxram"
    - mvn -DskipTests clean install
  artifacts:
    paths:
      - "target/xs2a-ctk*jar"
    name: "$CI_PROJECT_NAME-${CI_BUILD_REF_NAME#*v}"
    expire_in: "1 day"

# Develop

build_image_integ:
  stage: "Package"
  only:
    - develop
  variables:
    DOCKER_TAG: integ
  <<: *build_docker_image

deploy_image_integ:
  stage: "Deploy"
  image: "adorsys/ci-build:latest"
  only:
    - develop
  variables:
    DOCKER_TAG: integ
    OPENSHIFT_NAMESPACE: ${OPENSHIFT_NAMESPACE_ADDGREEN_FILEUPLOAD} # Openshift target namespace
  <<: *deploy_openshift

# Support8x

deploy_image_support8x:
  stage: "Deploy"
  image: "adorsys/ci-build:latest"
  only:
    - develop
  variables:
    DOCKER_TAG: integ
    OPENSHIFT_NAMESPACE: ${OPENSHIFT_NAMESPACE_SUPPORT8X} # Openshift target namespace
  <<: *deploy_openshift

# Master

build_image_master:
  stage: "Package"
  only:
    - master
  variables:
    DOCKER_TAG: latest
  <<: *build_docker_image

## Release
#
#build_image_release:
#  stage: "Package"
#  only:
#    - tags
#  variables:
#    DOCKER_TAG: $CI_COMMIT_TAG
#  <<: *build_docker_image
#
## Integ tests
#
#build_image_integtest:
#  stage: "Package"
#  only:
#    - schedules
#  variables:
#    DOCKER_TAG: nightly
#  <<: *build_docker_image


